"use client"

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { TrendingUp, Target, Sparkles, Trophy, DollarSign, Plus, LogOut, User, RefreshCw, BarChart3 } from 'lucide-react'
import DebtTracker from './DebtTracker'
import MotivationalMessages from './MotivationalMessages'
import ProgressCelebration from './ProgressCelebration'
import AiSuggestions from './AiSuggestions'
import SheetSetupPanel from './SheetSetupPanel'
import UserProfile from './UserProfile'
import AnalyticsDashboard from './AnalyticsDashboard'
import { useDebtManager } from '@/hooks/useDebtManager'
import { useSession, signOut } from 'next-auth/react'

export default function Dashboard() {
  const { data: session } = useSession()
  const [showCelebration, setShowCelebration] = useState(false)
  const [activeTab, setActiveTab] = useState('dashboard')
  const [celebrationMilestone, setCelebrationMilestone] = useState(0)
  const [showUserProfile, setShowUserProfile] = useState(false)
  
  // Use our Google Sheets integration
  const {
    debts,
    payments,
    stats,
    recentPayments,
    loading,
    creating,
    updating,
    paying,
    error,
    refreshData,
    createDebt,
    updateDebt,
    deleteDebt,
    makePayment,
  } = useDebtManager()

  const user = session?.user || { name: 'Usuario Demo', email: 'demo@findia.com' }

  // Calculate values from stats or fallback to 0
  const totalDebt = stats?.totalDebt || 0
  const totalPaid = stats?.totalPaid || 0
  const progressPercentage = stats?.progressPercentage || 0
  const monthlyPayment = stats?.monthlyPayment || 0
  const totalDebts = stats?.totalDebts || 0

  // Cargar tema guardado al iniciar
  useEffect(() => {
    const savedTheme = localStorage.getItem('findia-theme');
    if (savedTheme === 'dark') {
      document.documentElement.classList.remove('light');
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
      document.documentElement.classList.add('light');
    }
  }, []);

  useEffect(() => {
    // Check for celebration milestones
    if (progressPercentage >= 25 && progressPercentage < 50 && !showCelebration) {
      setCelebrationMilestone(25)
      setShowCelebration(true)
    } else if (progressPercentage >= 50 && progressPercentage < 75 && !showCelebration) {
      setCelebrationMilestone(50)
      setShowCelebration(true)
    } else if (progressPercentage >= 75 && progressPercentage < 100 && !showCelebration) {
      setCelebrationMilestone(75)
      setShowCelebration(true)
    } else if (progressPercentage >= 100 && !showCelebration) {
      setCelebrationMilestone(100)
      setShowCelebration(true)
    }
  }, [progressPercentage, showCelebration])

  const handleLogout = () => {
    if (confirm('Â¿EstÃ¡s seguro de que quieres cerrar sesiÃ³n?')) {
      signOut({ callbackUrl: '/' })
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('es-ES', {
      style: 'currency',
      currency: 'EUR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-blue-900">
      {/* HEADER SIMPLIFICADO */}
      <header className="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-between items-center h-16">
            {/* Logo */}
            <div className="flex items-center space-x-3">
              <div className="bg-gradient-to-r from-blue-500 to-purple-600 p-2 rounded-xl">
                <Sparkles className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-blue-600">FindIA</h1>
                <p className="text-sm text-gray-600 dark:text-gray-300">Â¡Hola, {user?.name}!</p>
              </div>
            </div>
            
            {/* Botones lado derecho */}
            <div className="flex items-center space-x-4">
              {/* BOTÃ“N DARK MODE */}
              <button 
                onClick={() => {
                  const html = document.documentElement;
                  if (html.classList.contains('dark')) {
                    html.classList.remove('dark');
                    html.classList.add('light');
                    localStorage.setItem('findia-theme', 'light');
                  } else {
                    html.classList.remove('light');
                    html.classList.add('dark');
                    localStorage.setItem('findia-theme', 'dark');
                  }
                }}
                className="px-4 py-2 bg-purple-500 text-white rounded-lg font-bold cursor-pointer hover:bg-purple-600"
              >
                ðŸŒ™ DARK
              </button>

              {/* BotÃ³n Logout */}
              <button
                onClick={handleLogout}
                className="px-4 py-2 bg-red-500 text-white rounded-lg cursor-pointer hover:bg-red-600"
              >
                Cerrar
              </button>
            </div>
          </div>
          
          {/* Navigation tabs */}
          <div className="flex space-x-2 pb-4">
            {[
              { id: 'dashboard', label: 'Dashboard', icon: TrendingUp },
              { id: 'tracker', label: 'Seguimiento', icon: Target },
              { id: 'analytics', label: 'Analytics', icon: BarChart3 },
              { id: 'ai', label: 'IA Coach', icon: Sparkles },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg cursor-pointer ${
                  activeTab === tab.id
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                }`}
              >
                <tab.icon className="h-4 w-4" />
                <span>{tab.label}</span>
              </button>
            ))}
          </div>
        </div>
      </header>

      {/* Resto del contenido igual */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <AnimatePresence mode="wait">
          {activeTab === 'dashboard' && (
            <motion.div
              key="dashboard"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              {/* Dashboard content */}
              <div className="space-y-8">
                {/* Stats Cards */}
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6">
                  {[
                    { label: 'Deuda Total', value: formatCurrency(totalDebt), icon: DollarSign, color: 'red' },
                    { label: 'Total Pagado', value: formatCurrency(totalPaid), icon: TrendingUp, color: 'green' },
                    { label: 'Pago Mensual', value: formatCurrency(monthlyPayment), icon: Target, color: 'blue' },
                    { label: 'Progreso', value: `${progressPercentage}%`, icon: Trophy, color: 'purple' },
                  ].map((stat, index) => (
                    <motion.div
                      key={stat.label}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: index * 0.1 }}
                      className="bg-white dark:bg-gray-800 rounded-xl p-4 sm:p-6 shadow-sm border border-gray-100 dark:border-gray-700 hover:shadow-md transition-shadow duration-200"
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-gray-600 dark:text-gray-400">{stat.label}</p>
                          <p className="text-2xl font-bold text-gray-900 dark:text-white">{stat.value}</p>
                        </div>
                        <div className={`p-3 rounded-full bg-${stat.color}-100 dark:bg-${stat.color}-900/30`}>
                          <stat.icon className={`h-6 w-6 text-${stat.color}-600 dark:text-${stat.color}-400`} />
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>

                {/* Progress Bar */}
                <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-100 dark:border-gray-700">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Progreso General</h3>
                    <span className="text-sm text-gray-500 dark:text-gray-400">{progressPercentage}% completado</span>
                  </div>
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
                    <motion.div
                      className="bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full"
                      initial={{ width: 0 }}
                      animate={{ width: `${progressPercentage}%` }}
                      transition={{ duration: 1, ease: "easeOut" }}
                    />
                  </div>
                </div>

                {/* Debt Tracker */}
                <DebtTracker
                  debts={debts}
                  payments={payments}
                  loading={loading}
                  creating={creating}
                  updating={updating}
                  paying={paying}
                  onCreateDebt={createDebt}
                  onUpdateDebt={updateDebt}
                  onDeleteDebt={deleteDebt}
                  onMakePayment={(id: string, amount: number) => makePayment(id, amount, new Date().toISOString())}
                  onRefresh={refreshData}
                />
              </div>
            </motion.div>
          )}

          {activeTab === 'tracker' && (
            <motion.div
              key="tracker"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <DebtTracker
                debts={debts}
                payments={payments}
                loading={loading}
                creating={creating}
                updating={updating}
                paying={paying}
                onCreateDebt={createDebt}
                onUpdateDebt={updateDebt}
                onDeleteDebt={deleteDebt}
                onMakePayment={(id: string, amount: number) => makePayment(id, amount, new Date().toISOString())}
                onRefresh={refreshData}
              />
            </motion.div>
          )}

          {activeTab === 'analytics' && (
            <motion.div
              key="analytics"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <AnalyticsDashboard debts={debts} payments={payments} />
            </motion.div>
          )}

          {activeTab === 'ai' && (
            <motion.div
              key="ai"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <div className="space-y-8">
                <MotivationalMessages totalDebt={totalDebt} progressPercentage={progressPercentage} />
                <AiSuggestions debts={debts} totalDebt={totalDebt} monthlyPayment={monthlyPayment} />
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </main>

      {/* Modals and overlays */}
      <AnimatePresence>
        {showCelebration && (
          <ProgressCelebration
            milestone={celebrationMilestone}
            onClose={() => setShowCelebration(false)}
          />
        )}
        {showUserProfile && (
          <UserProfile
            user={user}
            onClose={() => setShowUserProfile(false)}
          />
        )}
      </AnimatePresence>
    </div>
  )
}